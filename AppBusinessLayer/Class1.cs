using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using AppDataAccessLayer;
using System.Collections;
using System.Data;

namespace AppBusinessLayer
{
    public class BusinessLayer
    {
        public bool AddMember(string name, string dob, long contact, string email, string state, string city, string pincode, string address, string password, string accountstatus)
        {
            DAL d = new DAL();
            bool status = d.AddMember(name, dob, contact, email, state, city, pincode, address, password, accountstatus);
            return status;
        }

        public int GetMemberId()
        {
            DAL d = new DAL();

            int id = d.GetMemberId();
            return id;
        }

        public int GetAuthorId()
        {
            DAL d = new DAL();

            int id = d.GetAutoGeneratedAuthorId();
            return id;
        }

        public int GetPublisherId()
        {
            DAL d = new DAL();

            int id = d.GetAutoGeneratedPublisherId();
            return id;
        }

        public string SearchAuthorById(int AuthorId)
        {
            DAL d = new DAL();

            string Authorname = d.GetAuthorById(AuthorId);
            return Authorname;
        }

        public string SearchPublisherById(int Publisher)
        {
            DAL d = new DAL();

            string Publisher_nm = d.GetPublisherById(Publisher);
            return Publisher_nm;
        }

        public bool UserLogin(string username, string password)
        {
            DAL d = new DAL();
            if (d.userLogin(username.Trim(), password.Trim()))
            {
                return true;
            }
            else
            {
                return false;
            }

        }

        public bool AdminLogin(string username, string password)
        {
            DAL d = new DAL();
            if (d.adminLogin(username.Trim(), password.Trim()))
            {
                return true;
            }
            else
            {
                return false;
            }

        }

        public bool AddAuthor(string name)
        {
            DAL d = new DAL();
            bool status = d.AddAuthor(name);
            return status;
        }

        public bool UpdateAuthor(string name, int AuthorId)
        {
            DAL d = new DAL();
            bool status = d.UpdateAuthor(name, AuthorId);
            return status;
        }

        public bool DeleteAuthor(int AuthorId)
        {
            DAL d = new DAL();
            bool status = d.DeleteAuthor(AuthorId);
            return status;
        }

        public bool AddPublisher(string PublisherName)
        {
            DAL d = new DAL();
            bool status = d.AddPublisher(PublisherName);
            return status;
        }

        public bool UpdatePublisher(string PublisherName, int PublisherId)
        {
            DAL d = new DAL();
            bool status = d.UpdatePublisher(PublisherName, PublisherId);
            return status;
        }

        public bool DeletePublisher(int PublisherId)
        {
            DAL d = new DAL();
            bool status = d.DeletePublisher(PublisherId);
            return status;
        }

        public string CheckIfAuthorAlreadyExist(int AuthorId)
        {
            DAL dl = new DAL();
            return dl.GetAuthorById(AuthorId);
        }

        public string CheckIfPublisherAlreadyExist(int PublisherId)
        {
            DAL dd = new DAL();
            return dd.GetPublisherById(PublisherId);

        }

        public Business_MemberDetails GetMemberDetailsWithMemberId(int MemberId)
        {
            DAL d = new DAL();
            Business_MemberDetails bL = new Business_MemberDetails();

            DAL_Member obj = new DAL_Member();

            obj = d.GetMemberDetailsWithMemberId(MemberId);
            bL.accountstatus = obj.accountstatus;
            bL.address = obj.address;
            bL.city = obj.city;
            bL.Contact = obj.Contact;
            bL.DOB = obj.DOB;
            bL.email = obj.email;
            bL.MemberName = obj.MemberName;
            bL.pincode = obj.pincode;
            bL.state = obj.state;
            return bL;
        }

        public bool DeleteMember(int memberid)
        {
            DAL d = new DAL();
            return d.DeleteMember(memberid);
        }

        public bool UpdateMemberStatusByMemberId(int memberId, string status)
        {
            DAL da = new DAL();
            return da.UpdateMemberStatusByMemberId(memberId, status);
        }

        public bool AddBookDetails(string filepath, string book_nm, string genre, string authornm, string publishernm, string publishdt, string lang, string edition, int bookcost, int no_of_pages, int actualcost, int currentcost, string bookdesc, int no_of_issuedbook)
        {
            DAL d = new DAL();
            bool status = d.AddBookDetails(filepath, book_nm, genre, authornm, publishernm, publishdt, lang, edition, bookcost, no_of_pages, actualcost, currentcost, bookdesc, no_of_issuedbook);
            return status;
        }

        public bool UpdateBookDetailsByBookId(int BookId, string filepath, string book_nm, string genre, string authornm, string publishernm, string publishdt, string lang, string edition, int bookcost, int no_of_pages, int actualcost, int currentcost, string bookdesc, int no_of_issuedbook)
        {
            DAL da = new DAL();
            return da.UpdateBookDetailsByBookId(BookId, filepath, book_nm, genre, authornm, publishernm, publishdt, lang, edition, bookcost, no_of_pages, actualcost, currentcost, bookdesc, no_of_issuedbook);
        }

        public bool DeleteBooksDetails(int BookId)
        {
            DAL d = new DAL();
            bool status = d.DeleteBookDetails(BookId);
            return status;
        }

        public Business_BookDetails GetBooksDetailWithBookId(int BookId)
        {
            try
            {
                DAL d = new DAL();
                Business_BookDetails bL = new Business_BookDetails();

                DAL_Book obj = new DAL_Book();

                obj = d.GetBookDetailsWithBookId(BookId);
                bL.Bookimg_link = obj.Bookimg_link;
                bL.BookName = obj.BookName;
                bL.Language = obj.Language;
                bL.genre = obj.genre;
                bL.Edition = obj.Edition;
                bL.AuthorName = obj.AuthorName;
                bL.PublisherName = obj.PublisherName;
                bL.Publish_dt = obj.Publish_dt;
                bL.actual_stock = obj.actual_stock;
                bL.book_cost = obj.book_cost;
                bL.no_of_pages = obj.no_of_pages;
                bL.current_Stock = obj.current_Stock;
                bL.no_of_issuedbook = obj.no_of_issuedbook;
                bL.Book_desc = obj.Book_desc;

                return bL;
            }
            catch (Exception)
            {

                throw;
            }
        }

        public ArrayList FillAuthor()
        {
            DAL d = new DAL();
            ArrayList AuthorList = new ArrayList();
            List<AuthorList> Au = d.FillAuthor();
            foreach (var item in Au)
            {
                string Author = item.Authors.ToString();
                AuthorList.Add(Author);
            }

            return AuthorList;
        }

        public ArrayList FillPublishers()
        {
            DAL d = new DAL();
            ArrayList PublishersList = new ArrayList();
            List<PublisherList> Pub = d.FillPublisher();
            foreach (var item in Pub)
            {
                string publisher = item.Publishers.ToString();
                PublishersList.Add(publisher);
            }

            return PublishersList;

        }

        public BusinessLayerL_MemberAndBook GetMemberAndBookNames(int memberId, int BookId)
        {
            DAL d = new DAL();
            BusinessLayerL_MemberAndBook BMAB = new BusinessLayerL_MemberAndBook();
            try
            {
                DAL_MemberAndBook DMB = d.GetMemberAndBookNames(memberId, BookId);
                BMAB.BookName = DMB.BookName;
                BMAB.MemberName = DMB.MemberName;
                BMAB.BookImgPath = DMB.BookImagPath;
                BMAB.Aval_stock = DMB.Available_Stock;
                return BMAB;
            }
            catch (Exception exp)
            {
                return BMAB;
            }


        }

        public bool AddBookIssueDetails(int memberid, string membername, int bookid, string bookname, string issuedate, string issuetype, string IsReturn)
        {
            DAL d = new DAL();
            return d.AddBookIssueDetails(memberid, membername, bookid, bookname, issuedate, issuetype, IsReturn);
        }

        public bool AddBookReturnEntry(int memberid, string membername, int bookid, string bookname, string issuedate, string duedate, string BookReturnDt)
        {
            DAL d = new DAL();
            return d.AddBookReturnEntry(memberid, membername, bookid, bookname, issuedate, duedate, BookReturnDt);
        }

        public Business_BookIssueDetails GetBookIssueDetailsBYBookIdAndMemberId(int memberId, int bookid)
        {
            DAL dd = new DAL();
            DAL_BookIssueDetails DBID = dd.GetBookIssueDetailsBYBookIdAndMemberId(memberId, bookid);
            Business_BookIssueDetails BBID = new Business_BookIssueDetails();
            BBID.BookName = DBID.BookName;
            BBID.MemberName = DBID.MemberName;
            BBID.BookIssueDate = DBID.BookIssueDate;
            BBID.BookDueDate = DBID.BookDueDate;
            BBID.IsReturn = DBID.IsReturn;
            BBID.CurrentStock = DBID.CurrentStock;
            return BBID;
        }

        public Business_MemberDetails GetMemberAllDetailsForUserProfile(string MemberName, string MemberEmail)
        {
            DAL d = new DAL();
            Business_MemberDetails bL = new Business_MemberDetails();

            DAL_Member obj = new DAL_Member();

            obj = d.GetMemberAllDetailsForUserProfile(MemberName, MemberEmail);
            bL.accountstatus = obj.accountstatus;
            bL.address = obj.address;
            bL.city = obj.city;
            bL.Contact = obj.Contact;
            bL.DOB = obj.DOB;
            bL.email = obj.email;
            bL.MemberName = obj.MemberName;
            bL.pincode = obj.pincode;
            bL.state = obj.state;
            bL.MemberId = obj.MemberId;
            bL.password = obj.password;
            bL.MemberId = obj.MemberId;
            return bL;
        }

        public DataTable GetBookIssueDetailsForMember(int MemberId)
        {
            DAL dal = new DAL();
            DataTable dt = new DataTable();
            dt = dal.GetBookIssueDetailsForMember(MemberId);
            return dt;
        }

        public bool UpdateMemberProfilr(string FullName, string Dob, string Contact, string email, string state, string city, string pincode, string address,
            string newpassword)
        {
            DAL da = new DAL();
            return da.UpdateMemberProfile(FullName, Dob, Contact, email, state, city, pincode, address, newpassword);
        }

        public bool AddBookReturn(int memberId, string MemberName, int bookId, string BookName, string ActualbookReturnDt, string IsReturnflg, int currentStock)
        {
            DAL dd = new DAL();
            return dd.AddBookReturn(memberId, MemberName, bookId, BookName, ActualbookReturnDt, IsReturnflg, currentStock);

        }

        public DataTable GetAllBookDetails()
        {
            DAL da = new DAL();
            return da.GetAllBookDetails();
        }

    }
}
