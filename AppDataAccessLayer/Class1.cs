using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Data.SqlClient;
using System.Data;
using System.Web;

namespace AppDataAccessLayer
{
    public class DAL
    {
        DAL_Book Bookdetails = new DAL_Book();
        string connectionString = @"Data Source=DESKTOP-9P2VFAK;Initial Catalog=eLibrary;Integrated Security=True";

        public bool AddMember(string name,string dob,long contact, string email,string state, string city,string pincode, string address, string password,string accountstatus)
        {
            SqlConnection cn = new SqlConnection(connectionString);
            cn.Open();
            SqlCommand cmd = new SqlCommand("SP_AddMember", cn);
            cmd.CommandType = CommandType.StoredProcedure;
            
            cmd.Parameters.AddWithValue("@Name", SqlDbType.NVarChar).Value = name;
            cmd.Parameters.AddWithValue("@dob", SqlDbType.NVarChar).Value = dob;
            cmd.Parameters.AddWithValue("@contact", SqlDbType.NChar).Value = contact;
            cmd.Parameters.AddWithValue("@email", SqlDbType.NVarChar).Value = email;
            cmd.Parameters.AddWithValue("@state", SqlDbType.NVarChar).Value = state;
            cmd.Parameters.AddWithValue("@city", SqlDbType.NVarChar).Value = city;
            cmd.Parameters.AddWithValue("@pincode", SqlDbType.NVarChar).Value = pincode;
            cmd.Parameters.AddWithValue("@address", SqlDbType.NVarChar).Value = address;
            cmd.Parameters.AddWithValue("@password", SqlDbType.NVarChar).Value = password;
            cmd.Parameters.AddWithValue("@accountstatus", SqlDbType.NVarChar).Value = accountstatus;

            if(cmd.ExecuteNonQuery()==1)
            {
                return true;
            }
            else
            {
                return false;
            }
        }

        public int GetMemberId()
        {
            SqlConnection con = new SqlConnection(connectionString);
            con.Open();
            SqlCommand cmd = new SqlCommand("SP_GetMemberId", con);
            cmd.CommandType = CommandType.StoredProcedure;

            SqlParameter returnParameter = cmd.Parameters.Add("RetVal", SqlDbType.Int);
            returnParameter.Direction = ParameterDirection.ReturnValue;
            cmd.ExecuteNonQuery();

            int id = (int)returnParameter.Value;
            con.Close();

            return id;
         }

        public int GetAutoGeneratedAuthorId()
        {
            SqlConnection con = new SqlConnection(connectionString);
            con.Open();
            SqlCommand cmd = new SqlCommand("SP_GetAuthorId", con);
            cmd.CommandType = CommandType.StoredProcedure;

            SqlParameter returnParameter = cmd.Parameters.Add("RetVal", SqlDbType.Int);
            returnParameter.Direction = ParameterDirection.ReturnValue;
            cmd.ExecuteNonQuery();

            int id = (int)returnParameter.Value;
            con.Close();

            return id;
        }

        public int GetAutoGeneratedPublisherId()
        {
            SqlConnection con = new SqlConnection(connectionString);
            con.Open();
            SqlCommand cmd = new SqlCommand("SP_GetPublisherId", con);
            cmd.CommandType = CommandType.StoredProcedure;

            SqlParameter returnParameter = cmd.Parameters.Add("returnVal", SqlDbType.Int);
            returnParameter.Direction = ParameterDirection.ReturnValue;
            cmd.ExecuteNonQuery();

            int id = (int)returnParameter.Value;
            con.Close();

            return id;
        }

        public string GetAuthorById(int AuthorId)
        {
            SqlConnection con = new SqlConnection(connectionString);
            con.Open();
            SqlCommand cmd = new SqlCommand("SP_GetAuthorDetailById", con);
            cmd.CommandType = CommandType.StoredProcedure;

            cmd.Parameters.AddWithValue("@AuthorId", SqlDbType.Int).Value = AuthorId;

            cmd.Parameters.Add("@returnAuthornm", SqlDbType.NVarChar, 50);
            cmd.Parameters["@returnAuthornm"].Direction = ParameterDirection.Output;
            cmd.ExecuteNonQuery();

            string Authorname = cmd.Parameters["@returnAuthornm"].Value.ToString();
            con.Close();
            if(Authorname!="" && Authorname!=null)
            {
                return Authorname;
            }
            else
            {
                return "Not found";
            }
           
        }

        public string GetPublisherById(int PublisherId)
        {
            SqlConnection con = new SqlConnection(connectionString);
            con.Open();
            SqlCommand cmd = new SqlCommand("SP_GetPublisherDetailById", con);
            cmd.CommandType = CommandType.StoredProcedure;

            cmd.Parameters.AddWithValue("@PublisherId", SqlDbType.Int).Value = PublisherId;

            cmd.Parameters.Add("@returnPublishernm", SqlDbType.NVarChar, 50);
            cmd.Parameters["@returnPublishernm"].Direction = ParameterDirection.Output;
            cmd.ExecuteNonQuery();

            string Publishername = cmd.Parameters["@returnPublishernm"].Value.ToString();
            con.Close();
            if (Publishername != "" && Publishername != null)
            {
                return Publishername;
            }
            else
            {
                return "Not found";
            }
        }


        public bool userLogin(string useremail,string password)
        {
            SqlConnection cn = new SqlConnection(connectionString);
            if(cn.State==ConnectionState.Closed)
            {
                cn.Open();
            }            
            SqlCommand cm = new SqlCommand("SP_userLogin", cn);
            cm.CommandType = CommandType.StoredProcedure;
            cm.Parameters.AddWithValue("@uemail", SqlDbType.NVarChar).Value=useremail;
            cm.Parameters.AddWithValue("@upwd", SqlDbType.NVarChar).Value=password;
            cm.Parameters.Add("@name", SqlDbType.NVarChar, 50);
            cm.Parameters["@name"].Direction = ParameterDirection.Output;
            cm.Parameters.Add("@password", SqlDbType.NVarChar, 50);
            cm.Parameters["@password"].Direction = ParameterDirection.Output;
            cm.Parameters.Add("@status", SqlDbType.NVarChar, 50);
            cm.Parameters["@status"].Direction = ParameterDirection.Output;
            cm.Parameters.Add("@email", SqlDbType.NVarChar, 50);
            cm.Parameters["@email"].Direction = ParameterDirection.Output;
            cm.ExecuteNonQuery();           
            string dbuseremail = (string)cm.Parameters["@email"].Value;            
            string dbuserpassword = (string)cm.Parameters["@password"].Value;
            string dbuserename = (string)cm.Parameters["@name"].Value;
            string dbuserstatus = (string)cm.Parameters["@status"].Value;
            if (useremail == dbuseremail && password == dbuserpassword)
            {
                HttpContext.Current.Session["username"] = dbuserename;
                HttpContext.Current.Session["role"] = "user";
                HttpContext.Current.Session["status"] = dbuserstatus;
                HttpContext.Current.Session["Useremail"] = dbuseremail;

                return true;
            }
            else
            {
                return false;
            }      
                     
        }

        public bool adminLogin(string useremail, string password)
        {
            SqlConnection cn = new SqlConnection(connectionString);
            if (cn.State == ConnectionState.Closed)
            {
                cn.Open();
            }
            SqlCommand cm = new SqlCommand("SP_AdminLogin", cn);
            cm.CommandType = CommandType.StoredProcedure;
            cm.Parameters.AddWithValue("@uemail", SqlDbType.NVarChar).Value = useremail;
            cm.Parameters.AddWithValue("@upwd", SqlDbType.NVarChar).Value = password;
            cm.Parameters.Add("@name", SqlDbType.NVarChar, 50);
            cm.Parameters["@name"].Direction = ParameterDirection.Output;
            cm.Parameters.Add("@password", SqlDbType.NVarChar, 50);
            cm.Parameters["@password"].Direction = ParameterDirection.Output;
            cm.Parameters.Add("@email", SqlDbType.NVarChar, 50);
            cm.Parameters["@email"].Direction = ParameterDirection.Output;
            cm.ExecuteNonQuery();
            string dbuseremail = (string)cm.Parameters["@email"].Value;
            string dbuserpassword = (string)cm.Parameters["@password"].Value;
            string dbuserename = (string)cm.Parameters["@name"].Value;
            if (useremail == dbuseremail && password == dbuserpassword)
            {
                HttpContext.Current.Session["username"] = dbuserename;
                HttpContext.Current.Session["role"] = "admin";
                return true;
            }
            else
            {
                return false;
            }

        }

        public bool AddAuthor(string name)
        {
            SqlConnection cn = new SqlConnection(connectionString);
            cn.Open();
            SqlCommand cmd = new SqlCommand("SP_AddAuthor", cn);
            cmd.CommandType = CommandType.StoredProcedure;

            cmd.Parameters.AddWithValue("@AuthorName", SqlDbType.NVarChar).Value = name;
            int i = cmd.ExecuteNonQuery();
            if (i==-1)
            {
                return true;
            }
            else
            {
                return false;
            }
        }

        public bool UpdateAuthor(string name,int AuthorId)
        {
            SqlConnection cn = new SqlConnection(connectionString);
            cn.Open();
            SqlCommand cmd = new SqlCommand("SP_UpdateAuthor", cn);
            cmd.CommandType = CommandType.StoredProcedure;

            cmd.Parameters.AddWithValue("@AuthorName", SqlDbType.NVarChar).Value = name;
            cmd.Parameters.AddWithValue("@AuthorId", SqlDbType.Int).Value = AuthorId;

            if (cmd.ExecuteNonQuery() == 1)
            {
                return true;
            }
            else
            {
                return false;
            }
        }

        public bool DeleteAuthor(int AuthorId)
        {
            SqlConnection cn = new SqlConnection(connectionString);
            cn.Open();
            SqlCommand cmd = new SqlCommand("SP_DeleteAuthor", cn);
            cmd.CommandType = CommandType.StoredProcedure;

            cmd.Parameters.AddWithValue("@AuthorId", SqlDbType.Int).Value = AuthorId;

            if (cmd.ExecuteNonQuery() == 1)
            {
                return true;
            }
            else
            {
                return false;
            }
        }

        public bool AddPublisher(string PublisherName)
        {
            SqlConnection cn = new SqlConnection(connectionString);
            cn.Open();
            SqlCommand cmd = new SqlCommand("SP_AddPublisher", cn);
            cmd.CommandType = CommandType.StoredProcedure;

            cmd.Parameters.AddWithValue("@PublisherName", SqlDbType.NVarChar).Value = PublisherName;

            if (cmd.ExecuteNonQuery() == 1)
            {
                return true;
            }
            else
            {
                return false;
            }
        }

        public bool UpdatePublisher(string PublisherName, int PublisherId)
        {
            SqlConnection cn = new SqlConnection(connectionString);
            cn.Open();
            SqlCommand cmd = new SqlCommand("SP_UpdatePublisher", cn);
            cmd.CommandType = CommandType.StoredProcedure;

            cmd.Parameters.AddWithValue("@PublisherName", SqlDbType.NVarChar).Value = PublisherName;
            cmd.Parameters.AddWithValue("@PublisherId", SqlDbType.Int).Value = PublisherId;

            if (cmd.ExecuteNonQuery() == 1)
            {
                return true;
            }
            else
            {
                return false;
            }
        }

        public bool DeletePublisher(int PublisherId)
        {
            SqlConnection cn = new SqlConnection(connectionString);
            cn.Open();
            SqlCommand cmd = new SqlCommand("SP_DeletePublisher", cn);
            cmd.CommandType = CommandType.StoredProcedure;

            cmd.Parameters.AddWithValue("@PublisherId", SqlDbType.Int).Value = PublisherId;

            if (cmd.ExecuteNonQuery() == 1)
            {
                return true;
            }
            else
            {
                return false;
            }
        }

        public DAL_Member GetMemberDetailsWithMemberId(int MemberId)
        {
            DAL_Member memberdetails = new DAL_Member();
            try
            {
                SqlConnection cn = new SqlConnection(connectionString);
                if (cn.State == ConnectionState.Closed)
                {
                    cn.Open();
                }
                SqlCommand cm = new SqlCommand("SP_GetMemberDetailsById", cn);
                cm.CommandType = CommandType.StoredProcedure;
                cm.Parameters.AddWithValue("@MemberId", SqlDbType.Int).Value = MemberId;
                cm.Parameters.Add("@MemberName", SqlDbType.NVarChar, 50);
                cm.Parameters["@MemberName"].Direction = ParameterDirection.Output;
                cm.Parameters.Add("@DOB", SqlDbType.NVarChar, 50);
                cm.Parameters["@DOB"].Direction = ParameterDirection.Output;
                cm.Parameters.Add("@Contact", SqlDbType.NVarChar, 50);
                cm.Parameters["@Contact"].Direction = ParameterDirection.Output;
                cm.Parameters.Add("@email", SqlDbType.NChar, 10);
                cm.Parameters["@email"].Direction = ParameterDirection.Output;
                cm.Parameters.Add("@state", SqlDbType.NVarChar, 50);
                cm.Parameters["@state"].Direction = ParameterDirection.Output;
                cm.Parameters.Add("@city", SqlDbType.NVarChar, 50);
                cm.Parameters["@city"].Direction = ParameterDirection.Output;
                cm.Parameters.Add("@pincode", SqlDbType.NVarChar, 50);
                cm.Parameters["@pincode"].Direction = ParameterDirection.Output;
                cm.Parameters.Add("@address", SqlDbType.NVarChar, 50);
                cm.Parameters["@address"].Direction = ParameterDirection.Output;
                cm.Parameters.Add("@accountstatus", SqlDbType.NVarChar, int.MaxValue);
                cm.Parameters["@accountstatus"].Direction = ParameterDirection.Output;

                cm.ExecuteNonQuery();
                
                memberdetails.MemberName = (string)cm.Parameters["@MemberName"].Value;
                memberdetails.email = (string)cm.Parameters["@email"].Value;
                memberdetails.pincode = (string)cm.Parameters["@pincode"].Value;
                memberdetails.state = (string)cm.Parameters["@state"].Value;
                memberdetails.city = (string)cm.Parameters["@city"].Value;
                memberdetails.address = (string)cm.Parameters["@address"].Value;
                memberdetails.Contact = (string)cm.Parameters["@contact"].Value;
                memberdetails.DOB = (string)cm.Parameters["@DOB"].Value;
                memberdetails.accountstatus = (string)cm.Parameters["@accountstatus"].Value;

                return memberdetails;

            }
            catch (Exception)
            {
                if (String.IsNullOrEmpty(memberdetails.MemberName))
                {
                    memberdetails.MemberName = "Member not found with this Id";
                }
                if (String.IsNullOrEmpty(memberdetails.email))
                {
                    memberdetails.email = "";
                }
                if (String.IsNullOrEmpty(memberdetails.pincode))
                {
                    memberdetails.pincode = "";
                }
                if (String.IsNullOrEmpty(memberdetails.state))
                {
                    memberdetails.state = "";
                }
                if (String.IsNullOrEmpty(memberdetails.city))
                {
                    memberdetails.city = "";
                }
                if (String.IsNullOrEmpty(memberdetails.address))
                {
                    memberdetails.address = "";
                }
                if (String.IsNullOrEmpty(memberdetails.Contact))
                {
                    memberdetails.Contact = "";
                }
                if (String.IsNullOrEmpty(memberdetails.DOB))
                {
                    memberdetails.DOB = "09/01/1999";
                }
                if (String.IsNullOrEmpty(memberdetails.accountstatus))
                {
                    memberdetails.accountstatus = "";
                }

                return memberdetails;
            }
        }

        public bool DeleteMember(int MemberId)
        {
            SqlConnection cn = new SqlConnection(connectionString);
            cn.Open();
            SqlCommand cmd = new SqlCommand("SP_DeleteMemberById", cn);
            cmd.CommandType = CommandType.StoredProcedure;

            cmd.Parameters.AddWithValue("@MemberId", SqlDbType.Int).Value = MemberId;

            if (cmd.ExecuteNonQuery() == 1)
            {
                return true;
            }
            else
            {
                return false;
            }
        }

        public bool UpdateMemberStatusByMemberId(int MemberId,string status)
        {
            SqlConnection cn = new SqlConnection(connectionString);
            cn.Open();
            SqlCommand cmd = new SqlCommand("SP_UpdateMemberStatusByMemberId", cn);
            cmd.CommandType = CommandType.StoredProcedure;

            cmd.Parameters.AddWithValue("@Status", SqlDbType.NVarChar).Value = status;
            cmd.Parameters.AddWithValue("@MemberId", SqlDbType.Int).Value = MemberId;

            if (cmd.ExecuteNonQuery() == 1)
            {
                return true;
            }
            else
            {
                return false;
            }

        }

        public List<PublisherList> FillPublisher()
        {

            DataTable dt = new DataTable();
            List<PublisherList> Publisherdetails = new List<PublisherList>();

            SqlConnection cn = new SqlConnection(connectionString);
            if (cn.State == ConnectionState.Closed)
            {
                cn.Open();
            }
            SqlCommand cmd = new SqlCommand("SP_PublisherList", cn);

            cmd.CommandType = CommandType.StoredProcedure;

            SqlDataAdapter da = new SqlDataAdapter(cmd);
            da.Fill(dt);

            foreach (DataRow dr in dt.Rows)
            {
                PublisherList obj = new PublisherList();

                obj.Publishers = dr["publisher_nm"].ToString();

                Publisherdetails.Add(obj);
            }


            return Publisherdetails;
        }

        public List<AuthorList> FillAuthor()
        {

            DataTable dt = new DataTable();
            List<AuthorList> Authordetails = new List<AuthorList>();

            SqlConnection cn = new SqlConnection(connectionString);
            if (cn.State == ConnectionState.Closed)
            {
                cn.Open();
            }
            SqlCommand cmd = new SqlCommand("SP_AuthorList", cn);

            cmd.CommandType = CommandType.StoredProcedure;

            SqlDataAdapter da = new SqlDataAdapter(cmd);
            da.Fill(dt);

            foreach (DataRow dr in dt.Rows)
            {
                AuthorList obj = new AuthorList();

                obj.Authors = dr["author_name"].ToString();

                Authordetails.Add(obj);
            }


            return Authordetails;
        }

        public bool AddBookDetails(string filepath,string book_nm, string genre, string authornm, string publishernm, string publishdt, string lang,
            string edition, int bookcost, int no_of_pages, int actualstock, int currentstock, string bookdesc, 
            int no_of_issuedbook)
        {
            SqlConnection cn = new SqlConnection(connectionString);
            cn.Open();
            SqlCommand cmd = new SqlCommand("SP_AddBookDetails", cn);
            cmd.CommandType = CommandType.StoredProcedure;

            cmd.Parameters.AddWithValue("@book_img_link", SqlDbType.NVarChar).Value = filepath;
            cmd.Parameters.AddWithValue("@book_nm", SqlDbType.NVarChar).Value = book_nm;
            cmd.Parameters.AddWithValue("@genre", SqlDbType.NVarChar).Value = genre;
            cmd.Parameters.AddWithValue("@Author_nm", SqlDbType.NVarChar).Value = authornm;
            cmd.Parameters.AddWithValue("@Publisher_nm", SqlDbType.NVarChar).Value = publishernm;
            cmd.Parameters.AddWithValue("@Publish_dt", SqlDbType.NVarChar).Value = publishdt;
            cmd.Parameters.AddWithValue("@language", SqlDbType.NVarChar).Value = lang;
            cmd.Parameters.AddWithValue("@edition", SqlDbType.NVarChar).Value = edition;
            cmd.Parameters.AddWithValue("@bookcost", SqlDbType.Int).Value = bookcost;
            cmd.Parameters.AddWithValue("@no_of_pages", SqlDbType.Int).Value = no_of_pages;
            cmd.Parameters.AddWithValue("@actualstock", SqlDbType.Int).Value = actualstock;
            cmd.Parameters.AddWithValue("@currentstock", SqlDbType.Int).Value = currentstock;
            cmd.Parameters.AddWithValue("@book_desc", SqlDbType.NVarChar).Value = bookdesc;
            cmd.Parameters.AddWithValue("@no_of_issuedbook", SqlDbType.Int).Value = no_of_issuedbook;


            int i = cmd.ExecuteNonQuery();
            if (i == -1)
            {
                return true;
            }
            else
            {
                return false;
            }
        }

        public bool UpdateBookDetailsByBookId(int Bookid, string filepath, string book_nm, string genre, string authornm, string publishernm, string publishdt, string lang,
            string edition, int bookcost, int no_of_pages, int actualstock, int currentstock, string bookdesc,
            int no_of_issuedbook)
        {
            SqlConnection cn = new SqlConnection(connectionString);
            cn.Open();
            SqlCommand cmd = new SqlCommand("SP_UpdateBookDetailsById", cn);
            cmd.CommandType = CommandType.StoredProcedure;
            cmd.Parameters.AddWithValue("@Book_id", SqlDbType.Int).Value = Bookid;
            cmd.Parameters.AddWithValue("@book_img_link", SqlDbType.NVarChar).Value = filepath;
            cmd.Parameters.AddWithValue("@book_nm", SqlDbType.NVarChar).Value = book_nm;
            cmd.Parameters.AddWithValue("@genre", SqlDbType.NVarChar).Value = genre;
            cmd.Parameters.AddWithValue("@Author_nm", SqlDbType.NVarChar).Value = authornm;
            cmd.Parameters.AddWithValue("@Publisher_nm", SqlDbType.NVarChar).Value = publishernm;
            cmd.Parameters.AddWithValue("@Publish_dt", SqlDbType.NVarChar).Value = publishdt;
            cmd.Parameters.AddWithValue("@language", SqlDbType.NVarChar).Value = lang;
            cmd.Parameters.AddWithValue("@edition", SqlDbType.NVarChar).Value = edition;
            cmd.Parameters.AddWithValue("@bookcost", SqlDbType.Int).Value = bookcost;
            cmd.Parameters.AddWithValue("@no_of_pages", SqlDbType.Int).Value = no_of_pages;
            cmd.Parameters.AddWithValue("@actualstock", SqlDbType.Int).Value = actualstock;
            cmd.Parameters.AddWithValue("@currentstock", SqlDbType.Int).Value = currentstock;
            cmd.Parameters.AddWithValue("@book_desc", SqlDbType.NVarChar).Value = bookdesc;
            cmd.Parameters.AddWithValue("@no_of_issuedbook", SqlDbType.Int).Value = no_of_issuedbook;


            if (cmd.ExecuteNonQuery() == 1)
            {
                return true;
            }
            else
            {
                return false;
            }
        }

        public bool DeleteBookDetails(int BookId)
        {
            SqlConnection cn = new SqlConnection(connectionString);
            cn.Open();
            SqlCommand cmd = new SqlCommand("SP_DeleteBookDetailsBYId", cn);
            cmd.CommandType = CommandType.StoredProcedure;

            cmd.Parameters.AddWithValue("@BookId", SqlDbType.Int).Value = BookId;

            if (cmd.ExecuteNonQuery() == 1)
            {
                return true;
            }
            else
            {
                return false;
            }
        }

        public DAL_Book GetBookDetailsWithBookId(int BookId)
        {
            try
            {
                SqlConnection cn = new SqlConnection(connectionString);
                if (cn.State == ConnectionState.Closed)
                {
                    cn.Open();
                }
                SqlCommand cm = new SqlCommand("SP_GetBookDetailsByBookId", cn);
                cm.CommandType = CommandType.StoredProcedure;
                cm.Parameters.AddWithValue("@BookId", SqlDbType.Int).Value = BookId;
                cm.Parameters.Add("@BookName", SqlDbType.NVarChar, 50);
                cm.Parameters["@BookName"].Direction = ParameterDirection.Output;
                cm.Parameters.Add("@genre", SqlDbType.NVarChar, 50);
                cm.Parameters["@genre"].Direction = ParameterDirection.Output;
                cm.Parameters.Add("@authornm", SqlDbType.NVarChar, 50);
                cm.Parameters["@authornm"].Direction = ParameterDirection.Output;
                cm.Parameters.Add("@publishernm", SqlDbType.NVarChar, 10);
                cm.Parameters["@publishernm"].Direction = ParameterDirection.Output;
                cm.Parameters.Add("@publisherdt", SqlDbType.NVarChar, 50);
                cm.Parameters["@publisherdt"].Direction = ParameterDirection.Output;
                cm.Parameters.Add("@lang", SqlDbType.NVarChar, 50);
                cm.Parameters["@lang"].Direction = ParameterDirection.Output;
                cm.Parameters.Add("@edition", SqlDbType.NVarChar, 50);
                cm.Parameters["@edition"].Direction = ParameterDirection.Output;
                cm.Parameters.Add("@perbookcost", SqlDbType.Int);
                cm.Parameters["@perbookcost"].Direction = ParameterDirection.Output;
                cm.Parameters.Add("@currentstock", SqlDbType.Int, 50);
                cm.Parameters["@currentstock"].Direction = ParameterDirection.Output;
                cm.Parameters.Add("@actualstock", SqlDbType.Int, 50);
                cm.Parameters["@actualstock"].Direction = ParameterDirection.Output;
                cm.Parameters.Add("@bookdesc", SqlDbType.NVarChar, 50);
                cm.Parameters["@bookdesc"].Direction = ParameterDirection.Output;
                cm.Parameters.Add("@bookimglink", SqlDbType.NVarChar, int.MaxValue);
                cm.Parameters["@bookimglink"].Direction = ParameterDirection.Output;
                cm.Parameters.Add("@noofissuebook", SqlDbType.Int, 50);
                cm.Parameters["@noofissuebook"].Direction = ParameterDirection.Output;
                cm.Parameters.Add("@no_of_pages", SqlDbType.Int, int.MaxValue);
                cm.Parameters["@no_of_pages"].Direction = ParameterDirection.Output;

                cm.ExecuteNonQuery();
                
                Bookdetails.BookName = (string)cm.Parameters["@BookName"].Value;
                Bookdetails.genre = (string)cm.Parameters["@genre"].Value;
                Bookdetails.AuthorName = (string)cm.Parameters["@authornm"].Value;
                Bookdetails.PublisherName = (string)cm.Parameters["@publishernm"].Value;
                Bookdetails.Publish_dt = (string)cm.Parameters["@publisherdt"].Value;
                Bookdetails.Language = (string)cm.Parameters["@lang"].Value;
                Bookdetails.Edition = (string)cm.Parameters["@edition"].Value;
                Bookdetails.book_cost = (int)cm.Parameters["@perbookcost"].Value;
                Bookdetails.actual_stock = (int)cm.Parameters["@actualstock"].Value;
                Bookdetails.current_Stock = (int)cm.Parameters["@currentstock"].Value;
                Bookdetails.no_of_issuedbook = (int)cm.Parameters["@noofissuebook"].Value;
                Bookdetails.no_of_pages = (int)cm.Parameters["@no_of_pages"].Value;
                Bookdetails.Book_desc = (string)cm.Parameters["@bookdesc"].Value;
                Bookdetails.Bookimg_link = (string)cm.Parameters["@bookimglink"].Value;

                return Bookdetails;


            }
            catch (Exception ex)
            {
                if (String.IsNullOrEmpty(Bookdetails.BookName))
                {
                    Bookdetails.BookName = "Book not found with this Id";
                }
                if (String.IsNullOrEmpty(Bookdetails.genre))
                {
                    Bookdetails.genre = "";
                }
                if (String.IsNullOrEmpty(Bookdetails.AuthorName))
                {
                    Bookdetails.AuthorName = "";
                }
                if (String.IsNullOrEmpty(Bookdetails.PublisherName))
                {
                    Bookdetails.PublisherName = "";
                }
                if (String.IsNullOrEmpty(Bookdetails.Language))
                {
                    Bookdetails.Language = "Book not found with this Id";
                }
                if (String.IsNullOrEmpty(Bookdetails.Book_desc))
                {
                    Bookdetails.Book_desc = "";
                }
                if (String.IsNullOrEmpty(Bookdetails.Bookimg_link))
                {
                    Bookdetails.Bookimg_link = "Book not found with this Id";
                }
               
                return Bookdetails;
            }
           
        }
        
        public DAL_MemberAndBook GetMemberAndBookNames(int memberId,int bookId)
        {
            DAL_MemberAndBook DMB = new DAL_MemberAndBook();
            try
            {
                DataTable dt = new DataTable();
                SqlConnection cn = new SqlConnection(connectionString);
                if (cn.State == ConnectionState.Closed)
                {
                    cn.Open();
                }

                SqlCommand cmd = new SqlCommand("SP_GetMemberAndBookDetail", cn);

                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.Add("@MemberId", SqlDbType.Int).Value = memberId;
                cmd.Parameters.Add("@BookId", SqlDbType.Int).Value = bookId;
                cmd.Parameters.Add("@MemberName", SqlDbType.NVarChar, 50);
                cmd.Parameters["@MemberName"].Direction = ParameterDirection.Output;
                cmd.Parameters.Add("@BookName", SqlDbType.NVarChar, 150);
                cmd.Parameters["@BookName"].Direction = ParameterDirection.Output;
                cmd.Parameters.Add("@book_img", SqlDbType.NVarChar, 150);
                cmd.Parameters["@book_img"].Direction = ParameterDirection.Output;
                cmd.Parameters.Add("@CurrentStock", SqlDbType.Int);
                cmd.Parameters["@CurrentStock"].Direction = ParameterDirection.Output;
                cmd.ExecuteNonQuery();

                DMB.BookName = (string)cmd.Parameters["@BookName"].Value;
                DMB.MemberName = (string)cmd.Parameters["@MemberName"].Value;
                DMB.BookImagPath = (string)cmd.Parameters["@book_img"].Value;
                DMB.Available_Stock = (int)cmd.Parameters["@CurrentStock"].Value;
                return DMB;

            }
            catch (Exception exception)
            {
                if (String.IsNullOrEmpty(DMB.BookName))
                {
                    DMB.BookName = "Book not found with this Id";
                }
                if (String.IsNullOrEmpty(DMB.MemberName))
                {
                    DMB.MemberName = "Member not found with this Id";
                }
                return DMB;
            }                      

        }

        public bool AddBookIssueDetails(int MemberId, string MemberName, int BookId, string BookName, string IssueDt, string IssueType,string isReturn)
        {
            SqlConnection cn = new SqlConnection(connectionString);
            cn.Open();
            SqlCommand cmd = new SqlCommand("SP_AddBookIssueEntry", cn);
            cmd.CommandType = CommandType.StoredProcedure;
            cmd.Parameters.AddWithValue("@BookId", SqlDbType.Int).Value = BookId;
            cmd.Parameters.AddWithValue("@BookName", SqlDbType.NVarChar).Value = BookName;
            cmd.Parameters.AddWithValue("@MemberId", SqlDbType.Int).Value = MemberId;
            cmd.Parameters.AddWithValue("@MemberName", SqlDbType.NVarChar).Value = MemberName;           
            cmd.Parameters.AddWithValue("@IssueDt", SqlDbType.NVarChar).Value = IssueDt;
            cmd.Parameters.AddWithValue("@book_approx_returnDT", SqlDbType.NVarChar).Value = IssueType;
            cmd.Parameters.AddWithValue("@Is_return", SqlDbType.NVarChar).Value = isReturn;
            cmd.Parameters.Add("@IsBookIssueDetailsAdded", SqlDbType.SmallInt, 50);
            cmd.Parameters["@IsBookIssueDetailsAdded"].Direction = ParameterDirection.Output;


            if (cmd.ExecuteNonQuery() == 1)
            {
               if(cmd.Parameters["@IsBookIssueDetailsAdded"].Value.ToString()!="")
                {
                    var x = cmd.Parameters["@IsBookIssueDetailsAdded"].Value.ToString();
                    return true;
                }
               else
                {
                    return false;
                }
                
            }
            else
            {
                return false;
            }
        }

        public bool AddBookReturnEntry(int MemberId,string MemberName,int BookId,string BookName,string IssueDt,string DueDt,string BookReturnDt)
        {

            SqlConnection cn = new SqlConnection(connectionString);
            cn.Open();
            SqlCommand cmd = new SqlCommand("SP_AddBookIssueEntry", cn);
            cmd.CommandType = CommandType.StoredProcedure;
            cmd.Parameters.AddWithValue("@BookId", SqlDbType.Int).Value = BookId;
            cmd.Parameters.AddWithValue("@BookName", SqlDbType.NVarChar).Value = BookName;
            cmd.Parameters.AddWithValue("@MemberId", SqlDbType.Int).Value = MemberId;
            cmd.Parameters.AddWithValue("@MemberName", SqlDbType.NVarChar).Value = MemberName;
            cmd.Parameters.AddWithValue("@IssueDt", SqlDbType.NVarChar).Value = IssueDt;
            cmd.Parameters.AddWithValue("@DueDt", SqlDbType.NVarChar).Value = DueDt;
            cmd.Parameters.AddWithValue("@BookReturnDt", SqlDbType.NVarChar).Value = BookReturnDt;
            cmd.Parameters.Add("@IsBookReturnEntryAdded", SqlDbType.SmallInt, 50);
            cmd.Parameters["@IsBookReturnEntryAdded"].Direction = ParameterDirection.Output;

            if(cmd.ExecuteNonQuery() == 1)
            {
                bool s = (bool)cmd.Parameters["@IsBookReturnEntryAdded"].Value;
                return true;
            }
            else
            {
                return false;
            }

        }

        public DAL_BookIssueDetails GetBookIssueDetailsBYBookIdAndMemberId(int MemberId, int BookId)
        {
            DataTable dt = new DataTable();
            SqlConnection cn = new SqlConnection(connectionString);
            if (cn.State == ConnectionState.Closed)
            {
                cn.Open();
            }

            SqlCommand cmd = new SqlCommand("SP_GetBookIssueDetailsBYBookIdAndMemberId", cn);

            cmd.CommandType = CommandType.StoredProcedure;
            cmd.Parameters.Add("@MemberId", SqlDbType.Int).Value = MemberId;
            cmd.Parameters.Add("@BookId", SqlDbType.Int).Value = BookId;
            cmd.Parameters.Add("@MemberName", SqlDbType.NVarChar, 50);
            cmd.Parameters["@MemberName"].Direction = ParameterDirection.Output;
            cmd.Parameters.Add("@BookName", SqlDbType.NVarChar, 50);
            cmd.Parameters["@BookName"].Direction = ParameterDirection.Output;
            cmd.Parameters.Add("@IssueDt", SqlDbType.NVarChar, 50);
            cmd.Parameters["@IssueDt"].Direction = ParameterDirection.Output;
            cmd.Parameters.Add("@DueDt", SqlDbType.NVarChar, 50);
            cmd.Parameters["@DueDt"].Direction = ParameterDirection.Output;
            cmd.Parameters.Add("@Is_return", SqlDbType.NVarChar, 20);
            cmd.Parameters["@Is_return"].Direction = ParameterDirection.Output;
            cmd.Parameters.Add("@CurrentStock", SqlDbType.Int);
            cmd.Parameters["@CurrentStock"].Direction = ParameterDirection.Output;
            
            cmd.ExecuteNonQuery();

            DAL_BookIssueDetails DBID = new DAL_BookIssueDetails();
            
            if (!string.IsNullOrEmpty((string)cmd.Parameters["@BookName"].Value.ToString()))
            {
                DBID.BookName = (string)cmd.Parameters["@BookName"].Value.ToString();
            } 
            else
            {
                DBID.BookName = "Book Not Found";
            }
            if(!string.IsNullOrEmpty((string)cmd.Parameters["@MemberName"].Value.ToString()))
            {
                DBID.MemberName = (string)cmd.Parameters["@MemberName"].Value;
            }
            else
            {
                DBID.MemberName = "Member Not Found";
            }
            if(!string.IsNullOrEmpty((string)cmd.Parameters["@IssueDt"].Value.ToString()))
            {
                DBID.BookIssueDate = (string)cmd.Parameters["@IssueDt"].Value;
            }
            else
            {
                DBID.BookIssueDate = "Book Issue Date is not there";
            }
            if(!string.IsNullOrEmpty((string)cmd.Parameters["@DueDt"].Value.ToString()))
            {
                DBID.BookDueDate = (string)cmd.Parameters["@DueDt"].Value;
            }
            else
            {
                DBID.BookDueDate = "Book Due Date is not there";
            }
            if (!string.IsNullOrEmpty((string)cmd.Parameters["@Is_return"].Value.ToString()))
            {
                DBID.IsReturn = (string)cmd.Parameters["@Is_return"].Value;
            }
            else
            {
                DBID.IsReturn = "Book is not returned yet";
            }
            if (!string.IsNullOrEmpty((string)cmd.Parameters["@CurrentStock"].Value.ToString()))
            {
                DBID.CurrentStock = (int)cmd.Parameters["@CurrentStock"].Value;
            }
            else
            {
                DBID.CurrentStock = 0;
            }                   
            return DBID;

        }

        public DAL_Member GetMemberAllDetailsForUserProfile(string Membername,string MemberEmail)
        {
            SqlConnection cn = new SqlConnection(connectionString);
            if (cn.State == ConnectionState.Closed)
            {
                cn.Open();
            }
            SqlCommand cm = new SqlCommand("SP_GetMemberAllDetailsByMemberNameAndEmail", cn);
            cm.CommandType = CommandType.StoredProcedure;
            cm.Parameters.AddWithValue("@username", SqlDbType.NVarChar).Value = Membername;
            cm.Parameters.AddWithValue("@useremail", SqlDbType.NVarChar).Value = MemberEmail;
            cm.Parameters.Add("@MemberId", SqlDbType.Int, 50);
            cm.Parameters["@MemberId"].Direction = ParameterDirection.Output;
            cm.Parameters.Add("@MemberName", SqlDbType.NVarChar, 50);
            cm.Parameters["@MemberName"].Direction = ParameterDirection.Output;
            cm.Parameters.Add("@DOB", SqlDbType.NVarChar, 50);
            cm.Parameters["@DOB"].Direction = ParameterDirection.Output;
            cm.Parameters.Add("@Contact", SqlDbType.NVarChar, 50);
            cm.Parameters["@Contact"].Direction = ParameterDirection.Output;
            cm.Parameters.Add("@email", SqlDbType.NChar, 50);
            cm.Parameters["@email"].Direction = ParameterDirection.Output;
            cm.Parameters.Add("@state", SqlDbType.NVarChar, 50);
            cm.Parameters["@state"].Direction = ParameterDirection.Output;
            cm.Parameters.Add("@city", SqlDbType.NVarChar, 50);
            cm.Parameters["@city"].Direction = ParameterDirection.Output;
            cm.Parameters.Add("@pincode", SqlDbType.NVarChar, 50);
            cm.Parameters["@pincode"].Direction = ParameterDirection.Output;
            cm.Parameters.Add("@address", SqlDbType.NVarChar, 50);
            cm.Parameters["@address"].Direction = ParameterDirection.Output;
            cm.Parameters.Add("@accountstatus", SqlDbType.NVarChar, int.MaxValue);
            cm.Parameters["@accountstatus"].Direction = ParameterDirection.Output;
            cm.Parameters.Add("@password", SqlDbType.NVarChar, int.MaxValue);
            cm.Parameters["@password"].Direction = ParameterDirection.Output;

            cm.ExecuteNonQuery();
            DAL_Member memberdetails = new DAL_Member();
            memberdetails.MemberId = (int)cm.Parameters["@MemberId"].Value;
            memberdetails.MemberName = (string)cm.Parameters["@MemberName"].Value;
            memberdetails.email = (string)cm.Parameters["@email"].Value;
            memberdetails.pincode = (string)cm.Parameters["@pincode"].Value;
            memberdetails.state = (string)cm.Parameters["@state"].Value;
            memberdetails.city = (string)cm.Parameters["@city"].Value;
            memberdetails.address = (string)cm.Parameters["@address"].Value;
            memberdetails.Contact = (string)cm.Parameters["@contact"].Value;
            memberdetails.DOB = (string)cm.Parameters["@DOB"].Value;
            memberdetails.accountstatus = (string)cm.Parameters["@accountstatus"].Value;
            memberdetails.password = (string)cm.Parameters["@password"].Value;
            memberdetails.state = (string)cm.Parameters["@state"].Value;

            return memberdetails;

        }

        public DataTable GetBookIssueDetailsForMember(int MemberId)
        {
            DataTable dt = new DataTable();
            SqlConnection cn = new SqlConnection(connectionString);
            if (cn.State == ConnectionState.Closed)
            {
                cn.Open();
            }

            SqlCommand cmd = new SqlCommand("SP_GetBookIssueDetailsByMemberId", cn);

            cmd.CommandType = CommandType.StoredProcedure;
            cmd.Parameters.Add("@MemberId", SqlDbType.Int).Value = MemberId;
            SqlDataAdapter da = new SqlDataAdapter(cmd);
            da.Fill(dt);
            return dt;
        }

        public bool UpdateMemberProfile(string FullName, string Dob, string Contact, string email, string state, string city, string pincode, string address,
            string newpassword)
        {
            SqlConnection cn = new SqlConnection(connectionString);
            cn.Open();
            SqlCommand cmd = new SqlCommand("SP_UpdateMemberProfileByNameAndEmail", cn);
            cmd.CommandType = CommandType.StoredProcedure;            
            cmd.Parameters.AddWithValue("@Name", SqlDbType.NVarChar).Value = FullName;
            cmd.Parameters.AddWithValue("@dob", SqlDbType.NVarChar).Value = Dob;
            cmd.Parameters.AddWithValue("@email", SqlDbType.NVarChar).Value = email;
            cmd.Parameters.AddWithValue("@contact", SqlDbType.NVarChar).Value = Contact;
            cmd.Parameters.AddWithValue("@state", SqlDbType.NVarChar).Value = state;
            cmd.Parameters.AddWithValue("@city", SqlDbType.NVarChar).Value = city;
            cmd.Parameters.AddWithValue("@pincode", SqlDbType.NVarChar).Value = pincode;
            cmd.Parameters.AddWithValue("@address", SqlDbType.NVarChar).Value = address;
            cmd.Parameters.AddWithValue("@password", SqlDbType.Int).Value = newpassword;
            
            if (cmd.ExecuteNonQuery() == 1)
            {
                return true;
            }
            else
            {
                return false;
            }
        }

        public bool AddBookReturn(int MemberId,string MemberName,int BookId,string BookName,string ActualReturnDt,string IsReturnFlag,int CurrentStock)
        {
            SqlConnection cn = new SqlConnection(connectionString);
            cn.Open();
            SqlCommand cmd = new SqlCommand("SP_BookReturnUpdate", cn);
            cmd.CommandType = CommandType.StoredProcedure;

            cmd.Parameters.AddWithValue("@member_id", SqlDbType.NVarChar).Value = MemberId;
            cmd.Parameters.AddWithValue("@member_name", SqlDbType.NVarChar).Value = MemberName;
            cmd.Parameters.AddWithValue("@book_id", SqlDbType.NChar).Value = BookId;
            cmd.Parameters.AddWithValue("@book_name", SqlDbType.NVarChar).Value = BookName;
            cmd.Parameters.AddWithValue("@Current_Stock", SqlDbType.NVarChar).Value = CurrentStock;
            cmd.Parameters.AddWithValue("@ActualReturnDt", SqlDbType.NVarChar).Value = ActualReturnDt;
            cmd.Parameters.AddWithValue("@IsReturn", SqlDbType.NVarChar).Value = IsReturnFlag;

            if (cmd.ExecuteNonQuery() == 1)
            {
                return true;
            }
            else
            {
                return false;
            }
        }

        public DataTable GetAllBookDetails()
        {
            DataTable dt = new DataTable();
            SqlConnection cn = new SqlConnection(connectionString);
            if (cn.State == ConnectionState.Closed)
            {
                cn.Open();
            }

            SqlCommand cmd = new SqlCommand("SP_GetAllBooks", cn);

            cmd.CommandType = CommandType.StoredProcedure;            
            SqlDataAdapter da = new SqlDataAdapter(cmd);
            da.Fill(dt);
            return dt;
        }
    }
}

